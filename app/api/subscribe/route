import { NextRequest, NextResponse } from 'next/server'

interface SubscribeRequest {
  email: string
  discipline: string
  country: string
}

export async function POST(request: NextRequest) {
  try {
    const body: SubscribeRequest = await request.json()
    const { email, discipline, country } = body

    // Validate email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(email)) {
      return NextResponse.json(
        { error: 'Invalid email address' },
        { status: 400 }
      )
    }

    // Option 1: Formspree (recommended - works everywhere)
    const formspreeEndpoint = process.env.FORMSPREE_ENDPOINT
    if (formspreeEndpoint) {
      const response = await fetch(formspreeEndpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Accept: 'application/json',
        },
        body: JSON.stringify({
          email,
          discipline,
          country,
          source: 'Rate Calculator',
          timestamp: new Date().toISOString(),
        }),
      })

      if (response.ok) {
        return NextResponse.json({ success: true })
      } else {
        throw new Error('Formspree submission failed')
      }
    }

    // Option 2: Supabase (if you want a database)
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
    const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY
    
    if (supabaseUrl && supabaseKey) {
      const response = await fetch(`${supabaseUrl}/rest/v1/subscribers`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'apikey': supabaseKey,
          'Authorization': `Bearer ${supabaseKey}`,
          'Prefer': 'return=minimal'
        },
        body: JSON.stringify({
          email,
          discipline,
          country,
          created_at: new Date().toISOString(),
        }),
      })

      if (response.ok || response.status === 201) {
        return NextResponse.json({ success: true })
      } else {
        throw new Error('Supabase submission failed')
      }
    }

    // Option 3: Direct email using Resend (simple email service)
    const resendKey = process.env.RESEND_API_KEY
    const notificationEmail = process.env.NOTIFICATION_EMAIL

    if (resendKey && notificationEmail) {
      const response = await fetch('https://api.resend.com/emails', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${resendKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          from: 'Rate Calculator <noreply@yourdomain.com>',
          to: notificationEmail,
          subject: 'New Rate Calculator Subscriber',
          html: `
            <h2>New Rate Calculator Subscriber</h2>
            <p><strong>Email:</strong> ${email}</p>
            <p><strong>Discipline:</strong> ${discipline}</p>
            <p><strong>Country:</strong> ${country}</p>
            <p><strong>Timestamp:</strong> ${new Date().toISOString()}</p>
          `,
        }),
      })

      if (response.ok) {
        return NextResponse.json({ success: true })
      } else {
        throw new Error('Resend email failed')
      }
    }

    // Option 4: Netlify Forms (automatic if deployed on Netlify)
    // This is handled in the frontend with a simple form submission

    // Fallback: Log to console (development only)
    console.log('New subscriber:', { email, discipline, country, timestamp: new Date().toISOString() })
    return NextResponse.json({ 
      success: true, 
      message: 'Subscription recorded (check server logs)' 
    })

  } catch (error) {
    console.error('Subscribe error:', error)
    return NextResponse.json(
      { error: 'Failed to process subscription' },
      { status: 500 }
    )
  }
}
